package plodsoft.mygvm.testopcodes

import plodsoft.mygvm.TestingInputStream
import plodsoft.mygvm.model.DefaultRamModel
import plodsoft.mygvm.model.TestingKeyboardModel
import plodsoft.mygvm.model.TestingScreenModel
import plodsoft.mygvm.model.TestingTextModel
import plodsoft.mygvm.test
import java.io.ByteArrayOutputStream


fun testRuntime() {
    val ram = DefaultRamModel()
    val input = TestingInputStream()
    val output = ByteArrayOutputStream()
    val runtime = plodsoft.mygvm.runtime.Runtime(ram, TestingScreenModel(output), TestingTextModel(output), TestingKeyboardModel(input, output))

    /**
     void main() {
       *(int32 *) 0xe000 = 0x12345678;
       printf("%d,%d,%d", *(uint8 *) 0xe000, *(int16 *) 0xe000, *(int32 *) 0xe000);
     }
     */
    runtime.test("测试 0x04, 0x05, 0x06,  0x0d, printf, 0x3c, 0x3b, 0x03, 0x35, 0x40, 0x01", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3c, 0x00, 0x20, 0x3b, 0x17, 0x00, 0x00,
            0x3e, 0x05, 0x00, 0x00,
            0x03, 0x00, 0xe0, 0x04, 0x00, 0x03, 0x78, 0x56, 0x34, 0x12, 0x35, 0x38,
            0x0d, 0x25, 0x64, 0x2c, 0x25, 0x64, 0x2c, 0x25, 0x64, 0x00,
            0x04, 0x00, 0xe0, 0x05, 0x00, 0xe0, 0x06, 0x00, 0xe0,
            0x01, 0x04, 0x82, 0x40),
            "",
            """[add bytes (120,22136,305419896)]
               |[render text to screen: 0b0]
               |""".trimMargin())

    /**
     void main() {
       *(int32 *) 0xe000 = 0x89abcdef;
       printf("%d,%d,%d", *(uint8 *) (0xe000 + 3), *(int16 *) (0xe000 + 2), *(int32 *) (0xe000 + 0));
     }
     */
    runtime.test("测试 0x07, 0x08, 0x09", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3c, 0x00, 0x20, 0x3b, 0x17, 0x00, 0x00,
            0x3e, 0x05, 0x00, 0x00,
            0x03, 0x00, 0xe0, 0x04, 0x00, 0x03, 0xef, 0xcd, 0xab, 0x89, 0x35, 0x38,
            0x0d, 0x25, 0x64, 0x2c, 0x25, 0x64, 0x2c, 0x25, 0x64, 0x00,
            0x01, 0x03, 0x07, 0x00, 0xe0, 0x01, 0x02, 0x08, 0x00, 0xe0, 0x01, 0x00, 0x09, 0x00, 0xe0,
            0x01, 0x04, 0x82, 0x40),
            "",
            """[add bytes (137,-30293,-1985229329)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    char t[100];

    void main() {
        int a;
        a = 17;
        t[a] = 65;
        printf("%d", t[a]);
    }
     */
    runtime.test("测试 0x0a, 0x0f", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x64, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0x07, 0x00, 0x00,
            0x03, 0x05, 0x00, 0x82, 0x00, 0x01, 0x11, 0x35, 0x38,
            0x0F, 0x05, 0x00, 0x0A, 0x00, 0x20, 0x01, 0x41, 0x35, 0x38,
            0x0D, 0x25, 0x64, 0x00, 0x0F, 0x05, 0x00, 0x07, 0x00, 0x20, 0x01, 0x02, 0x82, 0x40),
            "",
            """[add bytes (65)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    int t[100];

    void main() {
    long a;
    a = 17;
    t[a] = 1000;
    printf("%d", t[a]);
    }
     */
    runtime.test("测试 0x0b, 0x10, 0x4a, (0x0c, 0x0e 已测试)", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0xC8, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0x09, 0x00, 0x00,
            0x03, 0x05, 0x00, 0x84, 0x00, 0x01, 0x11, 0x35, 0x38,
            0x10, 0x05, 0x00, 0x4A, 0x01, 0x00, 0x0B, 0x00, 0x20, 0x02, 0xE8, 0x03, 0x35, 0x38,
            0x0D, 0x25, 0x64, 0x00, 0x10, 0x05, 0x00, 0x4A, 0x01, 0x00, 0x08, 0x00, 0x20, 0x01, 0x02, 0x82, 0x40),
            "",
            """[add bytes (1000)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    void main() {
        char t[100];
        long a;
        a = 17;
        t[a] = 65;
        printf("%d", t[a]);
    }
     */
    runtime.test("测试 0x14, 0x11", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x00, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0x6D, 0x00, 0x00,
            0x03, 0x69, 0x00, 0x84, 0x00, 0x01, 0x11, 0x35, 0x38,
            0x10, 0x69, 0x00, 0x14, 0x05, 0x00, 0x01, 0x41, 0x35, 0x38,
            0x0D, 0x25, 0x64, 0x00, 0x10, 0x69, 0x00, 0x11, 0x05, 0x00, 0x01, 0x02, 0x82, 0x40),
            "",
            """[add bytes (65)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    void main() {
        int t[100];
        long a;
        a = 17;
        t[a] = 1234;
        printf("%d", t[a]);
    }
     */
    runtime.test("测试 0x15, 0x12 (0x16, 0x13 已测试)", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x00, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0xD1, 0x00, 0x00,
            0x03, 0xCD, 0x00, 0x84, 0x00, 0x01, 0x11, 0x35, 0x38,
            0x10, 0xCD, 0x00, 0x4A, 0x01, 0x00, 0x15, 0x05, 0x00, 0x02, 0xD2, 0x04, 0x35, 0x38,
            0x0D, 0x25, 0x64, 0x00, 0x10, 0xCD, 0x00, 0x4A, 0x01, 0x00, 0x12, 0x05, 0x00, 0x01, 0x02, 0x82, 0x40),
            "",
            """[add bytes (1234)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    void main() {
        *0xe000 = 65;
        printf("%d", *0xe000);
    }
     */
    runtime.test("测试 0x37, 0x36,", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x00, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0x05, 0x00, 0x00,
            0x03, 0x00, 0xE0, 0x00, 0x00, 0x37, 0x01, 0x41, 0x35, 0x38,
            0x0D, 0x25, 0x64, 0x00, 0x03, 0x00, 0xE0, 0x00, 0x00, 0x36, 0x01, 0x02, 0x82, 0x40),
            "",
            """[add bytes (65)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    long c;

    void main() {
        char a;
        int b;
        a = 10;
        b = 20;
        c = 30;
        printf("%d,%d,%d,%d,%d", ++a, --b, c++, c--, -c);
    }
     */
    runtime.test("测试 0x1c, 0x1d, 0x1e, 0x1f, 0x20", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x04, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0x08, 0x00, 0x00,
            0x03, 0x05, 0x00, 0x81, 0x00, 0x01, 0x0A, 0x35, 0x38,
            0x03, 0x06, 0x00, 0x82, 0x00, 0x01, 0x14, 0x35, 0x38,
            0x03, 0x00, 0x20, 0x04, 0x00, 0x01, 0x1E, 0x35, 0x38,
            0x0D, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x00,
            0x03, 0x05, 0x00, 0x81, 0x00, 0x1D,
            0x03, 0x06, 0x00, 0x82, 0x00, 0x1E,
            0x03, 0x00, 0x20, 0x04, 0x00, 0x1F,
            0x03, 0x00, 0x20, 0x04, 0x00, 0x20,
            0x06, 0x00, 0x20, 0x1C, 0x01, 0x06, 0x82, 0x40),
            "",
            """[add bytes (11,19,30,31,-30)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    int a[] = { 0x12, 0x34 };

    void main() {
        printf("%d", a[1]);
    }
     */
    runtime.test("初始化全局数组", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x41, 0x00, 0x20, 0x04, 0x00, 0x12, 0x00, 0x34, 0x00,
            0x3C, 0x04, 0x20, 0x3B, 0x20, 0x00, 0x00,
            0x3E, 0x05, 0x00, 0x00,
            0x0D, 0x25, 0x64, 0x00, 0x05, 0x02, 0x20, 0x01, 0x02, 0x82, 0x40),
            "",
            """[add bytes (52)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    void main() {
        int a; a = 9;
        printf("%d,%d", (((a + 2) * 3 / 4 - 5) % 6) << 2, a >> 1);
    }
     */
    runtime.test("测试 0x45, 0x47, 0x48, 0x46, 0x49, 0x4a, 0x4b", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x00, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0x07, 0x00, 0x00,
            0x03, 0x05, 0x00, 0x82, 0x00, 0x01, 0x09, 0x35, 0x38,
            0x0D, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x00,
            0x0F, 0x05, 0x00, 0x45, 0x02, 0x00, 0x47, 0x03, 0x00, 0x48, 0x04, 0x00, 0x46, 0x05, 0x00, 0x49, 0x06, 0x00, 0x4A, 0x02, 0x00, 0x0F, 0x05, 0x00, 0x4B, 0x01, 0x00, 0x01, 0x03, 0x82, 0x40),
            "",
            """[add bytes (12,4)]
              |[render text to screen: 0b0]
              |""".trimMargin())

    /**
    void main() {
        int s;
        s = "hello";
        SetScreen(1);
        UpdateLCD(0x12);
        putchar('a');
        strcpy(0xe000, s);
        printf("%d,%d", strlen(0xe000),getchar());
    }
     */
    runtime.test("putchar, getchar, SetScreen, UpdateLCD, strcpy, strlen", input, output, intArrayOf(
            0x4C, 0x41, 0x56, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x3C, 0x00, 0x20, 0x3B, 0x17, 0x00, 0x00,
            0x3E, 0x07, 0x00, 0x00,
            0x03, 0x05, 0x00, 0x82, 0x00, 0x0D, 0x68, 0x65, 0x6C, 0x6C, 0x6F, 0x00, 0x35, 0x38,
            0x01, 0x01, 0x85,
            0x01, 0x12, 0x86,
            0x01, 0x61, 0x80,
            0x03, 0x00, 0xE0, 0x00, 0x00, 0x0F, 0x05, 0x00, 0x83,
            0x0D, 0x25, 0x64, 0x2C, 0x25, 0x64, 0x00, 0x03, 0x00, 0xE0, 0x00, 0x00, 0x84, 0x81, 0x01, 0x03, 0x82, 0x40),
            "20",
            """[set text mode to SMALL_FONT]
              |[render text to screen: 0b10010]
              |[add byte a]
              |[render text to screen: 0b0]
              |[get key true: 20]
              |[add bytes (5,20)]
              |[render text to screen: 0b0]
              |""".trimMargin())
}

fun main(args: Array<String>) {
    testRuntime()
}
